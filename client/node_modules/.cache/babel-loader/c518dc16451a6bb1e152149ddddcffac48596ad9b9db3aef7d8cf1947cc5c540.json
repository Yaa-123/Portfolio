{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nrequire('dotenv').config();\nconst app = express();\n\n// Security middleware\napp.use(helmet());\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' ? 'https://yourdomain.com' : 'http://localhost:3000',\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\napp.use(limiter);\n\n// Body parsing middleware\napp.use(express.json({\n  limit: '10kb'\n}));\napp.use(express.urlencoded({\n  extended: true\n}));\n\n// MongoDB connection\nmongoose.connect(process.env.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('MongoDB connected successfully')).catch(err => console.log(err));\n\n// Routes\napp.use('/api/public', require('./routes/publicRoutes'));\napp.use('/api/admin', require('./routes/adminRoutes'));\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({\n    message: 'Something went wrong!'\n  });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    message: 'Route not found'\n  });\n});\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","require","mongoose","cors","helmet","rateLimit","config","app","use","origin","process","env","NODE_ENV","credentials","limiter","windowMs","max","json","limit","urlencoded","extended","connect","MONGODB_URI","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","req","res","next","error","stack","status","message","PORT","listen"],"sources":["C:/Users/USER/Desktop/Portfolio Website/client/src/index.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst cors = require('cors');\r\nconst helmet = require('helmet');\r\nconst rateLimit = require('express-rate-limit');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\n\r\n// Security middleware\r\napp.use(helmet());\r\napp.use(cors({\r\n  origin: process.env.NODE_ENV === 'production' \r\n    ? 'https://yourdomain.com' \r\n    : 'http://localhost:3000',\r\n  credentials: true\r\n}));\r\n\r\n// Rate limiting\r\nconst limiter = rateLimit({\r\n  windowMs: 15 * 60 * 1000, // 15 minutes\r\n  max: 100 // limit each IP to 100 requests per windowMs\r\n});\r\napp.use(limiter);\r\n\r\n// Body parsing middleware\r\napp.use(express.json({ limit: '10kb' }));\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// MongoDB connection\r\nmongoose.connect(process.env.MONGODB_URI, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n})\r\n.then(() => console.log('MongoDB connected successfully'))\r\n.catch(err => console.log(err));\r\n\r\n// Routes\r\napp.use('/api/public', require('./routes/publicRoutes'));\r\napp.use('/api/admin', require('./routes/adminRoutes'));\r\n\r\n// Error handling middleware\r\napp.use((err, req, res, next) => {\r\n  console.error(err.stack);\r\n  res.status(500).json({ message: 'Something went wrong!' });\r\n});\r\n\r\n// 404 handler\r\napp.use('*', (req, res) => {\r\n  res.status(404).json({ message: 'Route not found' });\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMI,SAAS,GAAGJ,OAAO,CAAC,oBAAoB,CAAC;AAC/CA,OAAO,CAAC,QAAQ,CAAC,CAACK,MAAM,CAAC,CAAC;AAE1B,MAAMC,GAAG,GAAGP,OAAO,CAAC,CAAC;;AAErB;AACAO,GAAG,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAC,CAAC;AACjBG,GAAG,CAACC,GAAG,CAACL,IAAI,CAAC;EACXM,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACzC,wBAAwB,GACxB,uBAAuB;EAC3BC,WAAW,EAAE;AACf,CAAC,CAAC,CAAC;;AAEH;AACA,MAAMC,OAAO,GAAGT,SAAS,CAAC;EACxBU,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;EAAE;EAC1BC,GAAG,EAAE,GAAG,CAAC;AACX,CAAC,CAAC;AACFT,GAAG,CAACC,GAAG,CAACM,OAAO,CAAC;;AAEhB;AACAP,GAAG,CAACC,GAAG,CAACR,OAAO,CAACiB,IAAI,CAAC;EAAEC,KAAK,EAAE;AAAO,CAAC,CAAC,CAAC;AACxCX,GAAG,CAACC,GAAG,CAACR,OAAO,CAACmB,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;;AAE/C;AACAlB,QAAQ,CAACmB,OAAO,CAACX,OAAO,CAACC,GAAG,CAACW,WAAW,EAAE;EACxCC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,CAAC,CACDC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC,CAAC,CACzDC,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC,CAAC;;AAE/B;AACAtB,GAAG,CAACC,GAAG,CAAC,aAAa,EAAEP,OAAO,CAAC,uBAAuB,CAAC,CAAC;AACxDM,GAAG,CAACC,GAAG,CAAC,YAAY,EAAEP,OAAO,CAAC,sBAAsB,CAAC,CAAC;;AAEtD;AACAM,GAAG,CAACC,GAAG,CAAC,CAACqB,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAC/BN,OAAO,CAACO,KAAK,CAACJ,GAAG,CAACK,KAAK,CAAC;EACxBH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAClB,IAAI,CAAC;IAAEmB,OAAO,EAAE;EAAwB,CAAC,CAAC;AAC5D,CAAC,CAAC;;AAEF;AACA7B,GAAG,CAACC,GAAG,CAAC,GAAG,EAAE,CAACsB,GAAG,EAAEC,GAAG,KAAK;EACzBA,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAAClB,IAAI,CAAC;IAAEmB,OAAO,EAAE;EAAkB,CAAC,CAAC;AACtD,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAG3B,OAAO,CAACC,GAAG,CAAC0B,IAAI,IAAI,IAAI;AACrC9B,GAAG,CAAC+B,MAAM,CAACD,IAAI,EAAE,MAAMX,OAAO,CAACC,GAAG,CAAC,0BAA0BU,IAAI,EAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}